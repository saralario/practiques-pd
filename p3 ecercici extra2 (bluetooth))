#include <Arduino.h>
#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>

// Identificadors únics per al servei (nom del dispositiu) i la característica
#define SERVICE_UUID           "0000181C-0000-1000-8000-00805F9B34FB"
#define CHARACTERISTIC_UUID    "00002A74-0000-1000-8000-00805F9B34FB"

// Punter per gestionar la característica BLE 
BLECharacteristic *pCharacteristic;

// Creació del servidor BLE (es gestiona la connexió i la desconnexió)
class MyServerCallbacks: public BLEServerCallbacks {
    void onConnect(BLEServer* pServer) {
        Serial.println("Dispositiu connectat");
    };

    void onDisconnect(BLEServer* pServer) {
        Serial.println("Dispositiu desconnectat");
    }
};

void setup() {
    // Configurar la comunicació sèrie 
    Serial.begin(115200);
    Serial.println("Inicialitzant BLE...");

    // Inicialitzar BLE
    BLEDevice::init("ESP32 BLE Server");

    // Crear i configurar el servidor BLE
    BLEServer *pServer = BLEDevice::createServer();
    pServer->setCallbacks(new MyServerCallbacks());

    // Crear un servei BLE i afegir-lo al servidor
    BLEService *pService = pServer->createService(SERVICE_UUID);

    // Crear una característica BLE amb permisos de lectura i escriptura
    pCharacteristic = pService->createCharacteristic(
                        CHARACTERISTIC_UUID,
                        BLECharacteristic::PROPERTY_READ |
                        BLECharacteristic::PROPERTY_WRITE
                      );

    // CAssignar un valor inicial a la característica
    pCharacteristic->setValue("Hola desde ESP32!");

    // Activar el servei BLE
    pService->start();

    // Configurar i iniciar la publicitat BLE per fer visible el dispositiu
    BLEAdvertising *pAdvertising = pServer->getAdvertising();
    pAdvertising->start();
    Serial.println("Esperando cliente...");
}

void loop() {
    // No es requereix cap operació contínua, simplement esperem connexions BLE
    delay(2000);
}
